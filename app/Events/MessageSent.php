<?php

namespace App\Events;

use App\Models\Message;
use Illuminate\Broadcasting\PrivateChannel;
use Illuminate\Contracts\Broadcasting\ShouldBroadcastNow;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Log;

class MessageSent implements ShouldBroadcastNow
{
    use Dispatchable, SerializesModels;

    public $message;

    public function __construct(Message $message)
    {
        $this->message = $message;

        // âœ… Log luÃ´n khi event Ä‘Æ°á»£c táº¡o
        Log::info('ğŸ“¨ Event MessageSent Ä‘Æ°á»£c táº¡o', [
            'id' => $this->message->id,
            'from_id' => $this->message->from_id,
            'to_id' => $this->message->to_id,
            'message' => $this->message->message,
        ]);
    }

    public function broadcastOn(): array
    {
        // âœ… Log khi broadcast
        Log::info('ğŸ“¡ Broadcasting trÃªn channel', [
            'channel' => 'chat.' . $this->message->to_id,
        ]);

        return [
            new PrivateChannel('chat.' . $this->message->to_id),
        ];
    }

    public function broadcastWith(): array
    {
        // âœ… Log dá»¯ liá»‡u gá»­i Ä‘i
        Log::info('ğŸ“¦ Payload gá»­i Ä‘i', [
            'id' => $this->message->id,
            'from_id' => $this->message->from_id,
            'to_id' => $this->message->to_id,
            'message' => $this->message->message,
        ]);

        return [
            'id' => $this->message->id,
            'from_id' => $this->message->from_id,
            'to_id' => $this->message->to_id,
            'message' => $this->message->message,
        ];
    }
}